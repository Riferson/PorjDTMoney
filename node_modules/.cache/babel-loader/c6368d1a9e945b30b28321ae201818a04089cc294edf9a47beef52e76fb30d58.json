{"ast":null,"code":"var _jsxFileName = \"/home/drmais/Curso Ignite/PorjDTMoney/dtmoney/src/TransactionsContext.tsx\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useState } from 'react';\nimport { api } from './services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionsContext = /*#__PURE__*/createContext({});\nexport function TransactionProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [transactions, setTransactions] = useState([]);\n  useEffect(() => {\n    api.get('transactions').then(response => setTransactions(response.data.transactions));\n  }, []);\n  async function createTransaction(transaction) {\n    await api.post('/transactions', transaction);\n  }\n  return /*#__PURE__*/_jsxDEV(TransactionsContext.Provider, {\n    value: {\n      transactions,\n      createTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n_s(TransactionProvider, \"tSC852gg/pAfbHr6jYEePbawnUU=\");\n_c = TransactionProvider;\nvar _c;\n$RefreshReg$(_c, \"TransactionProvider\");","map":{"version":3,"names":["createContext","useEffect","useState","api","TransactionsContext","TransactionProvider","children","transactions","setTransactions","get","then","response","data","createTransaction","transaction","post"],"sources":["/home/drmais/Curso Ignite/PorjDTMoney/dtmoney/src/TransactionsContext.tsx"],"sourcesContent":["import {createContext, useEffect, useState,ReactNode} from 'react';\nimport { api } from './services/api';\n\n\ninterface Transaction{\n    id:number;\n    title:string;\n    amount:number;\n    type:string;\n    category:string;\n    createdAt:string;\n}\n\ntype TransactionInput = Omit<Transaction, 'id' | 'createdAt'>;\n\ninterface TransactionsProviderProps {\n    children: ReactNode;\n}\n\ninterface TransactionsContextData{\n    transactions:Transaction[];\n    createTransaction:(transaction:TransactionInput)=>Promis;\n}\n\nexport const TransactionsContext = createContext<TransactionsContextData>({} as TransactionsContextData);\n\nexport function TransactionProvider({children}:TransactionsProviderProps){\n    const [transactions, setTransactions] = useState<Transaction[]>([]);\n\n    useEffect(()=>{\n        api.get('transactions')\n        .then(response => setTransactions(response.data.transactions))\n    },[]);\n\n    async function createTransaction(transaction:TransactionInput ){\n        \n        await api.post('/transactions',transaction)\n    }\n\n    return (\n        <TransactionsContext.Provider value={{transactions,createTransaction}}>\n            {children}\n        </TransactionsContext.Provider>\n    );\n  \n}"],"mappings":";;AAAA,SAAQA,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAiB,OAAO;AAClE,SAASC,GAAG,QAAQ,gBAAgB;AAAC;AAuBrC,OAAO,MAAMC,mBAAmB,gBAAGJ,aAAa,CAA0B,CAAC,CAAC,CAA4B;AAExG,OAAO,SAASK,mBAAmB,OAAsC;EAAA;EAAA,IAArC;IAACC;EAAkC,CAAC;EACpE,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAgB,EAAE,CAAC;EAEnED,SAAS,CAAC,MAAI;IACVE,GAAG,CAACM,GAAG,CAAC,cAAc,CAAC,CACtBC,IAAI,CAACC,QAAQ,IAAIH,eAAe,CAACG,QAAQ,CAACC,IAAI,CAACL,YAAY,CAAC,CAAC;EAClE,CAAC,EAAC,EAAE,CAAC;EAEL,eAAeM,iBAAiB,CAACC,WAA4B,EAAE;IAE3D,MAAMX,GAAG,CAACY,IAAI,CAAC,eAAe,EAACD,WAAW,CAAC;EAC/C;EAEA,oBACI,QAAC,mBAAmB,CAAC,QAAQ;IAAC,KAAK,EAAE;MAACP,YAAY;MAACM;IAAiB,CAAE;IAAA,UACjEP;EAAQ;IAAA;IAAA;IAAA;EAAA,QACkB;AAGvC;AAAC,GAnBeD,mBAAmB;AAAA,KAAnBA,mBAAmB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}